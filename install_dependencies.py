#!/usr/bin/env python3
"""
Script de instalaci√≥n autom√°tica de dependencias para I2E.
Maneja la instalaci√≥n de todas las librer√≠as necesarias y resuelve problemas comunes.
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Ejecutar comando y mostrar resultado."""
    print(f"\nüîß {description}...")
    print(f"Comando: {command}")

    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} completado exitosamente")
        if result.stdout:
            print(f"Salida: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en {description}: {e}")
        if e.stderr:
            print(f"Error: {e.stderr.strip()}")
        return False

def check_python_version():
    """Verificar versi√≥n de Python."""
    version = sys.version_info
    print(f"üêç Python {version.major}.{version.minor}.{version.micro}")

    if version < (3, 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        return False

    print("‚úÖ Versi√≥n de Python compatible")
    return True

def check_pip():
    """Verificar que pip est√© disponible."""
    try:
        import pip
        print("‚úÖ pip disponible")
        return True
    except ImportError:
        print("‚ùå Error: pip no est√° disponible")
        return False

def upgrade_pip():
    """Actualizar pip a la √∫ltima versi√≥n."""
    return run_command(
        f"{sys.executable} -m pip install --upgrade pip",
        "Actualizando pip"
    )

def install_basic_dependencies():
    """Instalar dependencias b√°sicas."""
    basic_deps = [
        "numpy>=1.24.0",
        "Pillow>=9.0.0",
        "opencv-python>=4.8.0",
        "openpyxl>=3.1.0"
    ]

    for dep in basic_deps:
        if not run_command(f"{sys.executable} -m pip install {dep}", f"Instalando {dep}"):
            return False

    return True

def install_pyqt5():
    """Instalar PyQt5 con manejo de errores."""
    print("\nüé® Instalando PyQt5...")

    # Intentar instalaci√≥n est√°ndar
    if run_command(f"{sys.executable} -m pip install PyQt5", "Instalando PyQt5"):
        return True

    print("‚ö†Ô∏è  PyQt5 fall√≥, intentando alternativas...")

    # Alternativa 1: Solo binarios
    if run_command(f"{sys.executable} -m pip install PyQt5 --only-binary=all", "Instalando PyQt5 (solo binarios)"):
        return True

    # Alternativa 2: PySide2
    print("üîÑ Intentando con PySide2 como alternativa...")
    if run_command(f"{sys.executable} -m pip install PySide2", "Instalando PySide2"):
        print("‚úÖ PySide2 instalado. La aplicaci√≥n funcionar√° con esta alternativa.")
        return True

    # Alternativa 3: PySide6
    print("üîÑ Intentando con PySide6 como alternativa...")
    if run_command(f"{sys.executable} -m pip install PySide6", "Instalando PySide6"):
        print("‚úÖ PySide6 instalado. La aplicaci√≥n funcionar√° con esta alternativa.")
        return True

    print("‚ùå No se pudo instalar ninguna interfaz gr√°fica")
    return False

def install_paddleocr():
    """Instalar PaddleOCR con manejo de errores."""
    print("\nü§ñ Instalando PaddleOCR...")

    # Instalar PaddlePaddle primero - versi√≥n compatible
    print("üì¶ Instalando PaddlePaddle...")
    paddlepaddle_commands = [
        "paddlepaddle>=2.5.1",
        "paddlepaddle",
        "paddlepaddle==2.5.2"
    ]

    paddlepaddle_installed = False
    for cmd in paddlepaddle_commands:
        if run_command(f"{sys.executable} -m pip install {cmd}", f"Instalando PaddlePaddle ({cmd})"):
            paddlepaddle_installed = True
            break

    if not paddlepaddle_installed:
        print("‚ùå No se pudo instalar PaddlePaddle")
        return False

    # Instalar PaddleOCR
    print("üì¶ Instalando PaddleOCR...")
    paddleocr_commands = [
        "paddleocr>=2.6.0",
        "paddleocr",
        "paddleocr==2.7.0"
    ]

    paddleocr_installed = False
    for cmd in paddleocr_commands:
        if run_command(f"{sys.executable} -m pip install {cmd}", f"Instalando PaddleOCR ({cmd})"):
            paddleocr_installed = True
            break

    if not paddleocr_installed:
        print("‚ùå No se pudo instalar PaddleOCR")
        return False

    return True

def install_dev_dependencies():
    """Instalar dependencias de desarrollo (opcionales)."""
    dev_deps = [
        "black>=23.0.0",
        "ruff>=0.1.0",
        "pytest>=7.0.0"
    ]

    print("\nüõ†Ô∏è  Instalando dependencias de desarrollo...")

    for dep in dev_deps:
        try:
            run_command(f"{sys.executable} -m pip install {dep}", f"Instalando {dep}")
        except:
            print(f"‚ö†Ô∏è  {dep} no se pudo instalar (opcional)")

    return True

def verify_installation():
    """Verificar que todas las dependencias est√©n instaladas."""
    print("\nüîç Verificando instalaci√≥n...")

    required_modules = [
        ("cv2", "OpenCV"),
        ("PIL", "Pillow"),
        ("numpy", "NumPy"),
        ("openpyxl", "OpenPyXL")
    ]

    # Verificar m√≥dulos b√°sicos
    for module, name in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {name} disponible")
        except ImportError:
            print(f"‚ùå {name} no disponible")
            return False

    # Verificar interfaz gr√°fica
    gui_available = False
    for gui_module in ["PyQt5", "PySide2", "PySide6"]:
        try:
            __import__(gui_module)
            print(f"‚úÖ {gui_module} disponible")
            gui_available = True
            break
        except ImportError:
            continue

    if not gui_available:
        print("‚ùå Ninguna interfaz gr√°fica disponible")
        return False

    # Verificar PaddleOCR
    try:
        import paddleocr
        print("‚úÖ PaddleOCR disponible")
    except ImportError:
        print("‚ùå PaddleOCR no disponible")
        return False

    print("\nüéâ ¬°Todas las dependencias est√°n instaladas correctamente!")
    return True

def main():
    """Funci√≥n principal de instalaci√≥n."""
    print("üöÄ I2E - Instalador de Dependencias")
    print("=" * 50)

    # Verificaciones iniciales
    if not check_python_version():
        return 1

    if not check_pip():
        return 1

    # Actualizar pip
    upgrade_pip()

    # Instalar dependencias
    if not install_basic_dependencies():
        print("‚ùå Error instalando dependencias b√°sicas")
        return 1

    if not install_pyqt5():
        print("‚ùå Error instalando interfaz gr√°fica")
        return 1

    if not install_paddleocr():
        print("‚ùå Error instalando PaddleOCR")
        return 1

    # Dependencias de desarrollo (opcionales)
    install_dev_dependencies()

    # Verificar instalaci√≥n
    if not verify_installation():
        print("‚ùå Error en la verificaci√≥n de dependencias")
        return 1

    print("\nüéØ Instalaci√≥n completada exitosamente!")
    print("\nüìù Pr√≥ximos pasos:")
    print("1. Ejecuta: python main.py")
    print("2. Si tienes problemas, ejecuta: python test_app.py")
    print("3. Consulta el README.md para m√°s informaci√≥n")

    return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Instalaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)
